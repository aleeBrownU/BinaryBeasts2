# -*- coding: utf-8 -*-
"""
Spyder Editor

This is a temporary script file.

"""

"""
import time
import pandas as pd
import matplotlib as mlp
import matplotlib.pyplot as plt
import random
import numpy as np
from tkinter import Tk, Label, Frame, Entry, Button, Text, BOTTOM, LEFT, TOP, RIGHT, END
from PIL import ImageTk, Image
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg


window = Tk()
w, h = window.winfo_screenwidth(), window.winfo_screenheight()
window.geometry("%dx%d+0+0" % (w, h))
topframe = Frame(window)
topframe.pack()
bottomframe = Frame(window)
bottomframe.pack(side=BOTTOM)

IGTtext = Text(topframe,width=75, height=25)
welcomemsg= """Hi. This is the Iowa Gambling Task
'In this task, you will start out with $5000, and your goal is to earn as much money as possible.
You will be presented with four card decks. When you draw a card from a deck, you will receive a monetary reward.
The amount of money you earn may differ between decks. There is also a chance for a penalty to occur.
This monetary penalty will deduct money. The amount of money deducted may differ between deck
You will draw a total of 100 cards. Earn the most amount of money with those 100 cards.
We will start now:"""

IGTtext.pack(side=LEFT)
IGTtext.insert(0.0, welcomemsg)

deck_list = np.mat([[100, 250],[100,50],[50,50],[50,250]])
np.random.shuffle(deck_list)
global userbest
userbest = 0

global money

initial = 5000 #initial money
money = initial #used later as the running money count
prob = 0.5 #probability of GETTING a deduction (range from 0 to 1)
Aplus = deck_list[0,0]  #when you pick on the card deck, you add this much money
Bplus = deck_list[1,0] 
Cplus = deck_list[2,0] 
Dplus = deck_list[3,0] 
Aminus = deck_list[0,1]  #Penalty amount you get deducted for each deck
Bminus = deck_list[1,1] 
Cminus = deck_list[2,1] 
Dminus = deck_list[3,1] 
Adiff = Aplus - Aminus
Bdiff = Bplus - Bminus
Cdiff = Cplus - Cminus
Ddiff = Dplus - Dminus

global bestdeck
bestdeck = 0

if Adiff>Bdiff and Adiff>Cdiff and Adiff>Ddiff:
    bestdeck=1
elif Bdiff>Cdiff and Bdiff>Ddiff:
    bestdeck =2
elif Cdiff>Ddiff:
    bestdeck=3
else:
    bestdeck=4
###Bonus and penalty for each deck


#bgimg = ImageTk.PhotoImage(Image.open("/Users/kushpatel/Downloads/wavebgrnd.png"))
#bglabel = Label(image=bhimg)
deck_img = ImageTk.PhotoImage(Image.open("/Users/kushpatel/Documents/GitHub/BinaryBeasts2/deckimg.jpeg"))
img_label = Label(image=deck_img)
#img_label.pack(pady=20)




global count
global countA
global countB
global countC
global countD
countA = 0
countB = 0
countC = 0
countD = 0
count = 1

global starttime 


buttonlist = []
reactiontimes = []
starttime = None
bonAtext = Text(topframe,width=75, height=25)
bonAtext.pack(side=LEFT)

def start():
    global starttime
    starttime = time.time() # this is when your program starts
    print(starttime)
    

def functionA(): #function Button A
       buttonlist.append("A")
       global starttime
       print(starttime)
       finaltime = time.time()
       elapsed_time = finaltime - starttime
      
       
       print(elapsed_time)
       reactiontimes.append(elapsed_time)
       starttime = finaltime
       global count
       if count>9:
            C["state"] = "disabled"
            D["state"] = "disabled"
            A["state"] = "disabled"
            B["state"] = "disabled"
            #results["state"] = "enabled"
       else:
        #results["state"] = "disabled"
        bonAtext.delete(0.0, END)
        if random.uniform(0,1)<=prob: #determines if penalty should occur
              penalty = True 
        else:
            penalty = False

        global money
        
        bonAtext.insert(0.0, "You earned $" + str(Aplus))
        toAdd = Aplus
        money +=toAdd  #adds the money
        scorelabel.config(text = "You currently have $" + str(money))
        if penalty: #if a penalty is to be given
          bonAtext.insert(0.0, "Your penalty was $" + str(Aminus))
          toSub = Aminus
          money = money - toSub #adds the money
        scorelabel.config(text = "You currently have $" + str(money))
        #labelA = Label(window, text="Button A")
        #labelA.pack()
        global countA
        countA +=1
        count +=1
        countlabel.config(text = "Click#" + str(count))
       
        
def functionB():
   buttonlist.append("B")
   global starttime
   print(starttime)
   finaltime = time.time()
   elapsed_time = finaltime - starttime

   print(elapsed_time)
   reactiontimes.append(elapsed_time)
   starttime = finaltime
   global count
   if count>9:
            C["state"] = "disabled"
            D["state"] = "disabled"
            A["state"] = "disabled"
            B["state"] = "disabled"
            #results["state"] = "enabled"
   else:
    #results["state"] = "disabled"
    bonAtext.delete(0.0, END)
    if random.uniform(0,1)<=prob: #determines if penalty should occur
              penalty = True 
    else:
            penalty = False
    global money
    #bonBtext = Text(window,width=75, height=25)
    #bonBtext.pack()
    bonAtext.insert(0.0, "You earned $" + str(Bplus))
    toAdd = Bplus
    money +=toAdd  #adds the money
    scorelabel.config(text = "You currently have $" + str(money))
    if penalty: #if a penalty is to be given
        #penBtext = Text(window,width=75, height=25)
        #penBtext.pack()
        bonAtext.insert(0.0, "Your penalty was $" + str(Bminus))
        toSub = Bminus
        money = money - toSub #adds the money
        scorelabel.config(text = "You currently have $" + str(money))
    global countB
    countB +=1
    count +=1
    countlabel.config(text = "Click#" + str(count))
    #labelB = Label(window, text="Button B")
    #labelB.pack()
    
    
def functionC():
   buttonlist.append("C")
   global starttime
   print(starttime)
   finaltime = time.time()
   elapsed_time = finaltime - starttime
       
   print(elapsed_time)
   reactiontimes.append(elapsed_time)
   starttime = finaltime
   global count
   if count>9:
            C["state"] = "disabled"
            D["state"] = "disabled"
            A["state"] = "disabled"
            B["state"] = "disabled"
            #results["state"] = "enabled"
   else:
    #results["state"] = "disabled"
    bonAtext.delete(0.0, END)
    if random.uniform(0,1)<=prob: #determines if penalty should occur
              penalty = True 
    else:
            penalty = False
    global money
    #bonCtext = Text(window,width=75, height=25)
    #bonCtext.pack()
    bonAtext.insert(0.0, "You earned $" + str(Cplus))
    toAdd = Cplus
    money +=toAdd  #adds the money
    scorelabel.config(text = "You currently have $" + str(money))
    if penalty: #if a penalty is to be given
        #penCtext = Text(window,width=75, height=25)
        #penCtext.pack()
        bonAtext.insert(0.0, "Your penalty was $" + str(Cminus))
        toSub = Cminus
        money = money - toSub #adds the money
    scorelabel.config(text = "You currently have $" + str(money))
    global countC
    countC +=1
    count +=1
    countlabel.config(text = "Click#" + str(count))        
    #labelC = Label(window, text="Button C")
    #labelC.pack()
    \



def functionD():
   buttonlist.append("D")
   global starttime
   print(starttime)
   finaltime = time.time()
   elapsed_time = finaltime - starttime
       
   print(elapsed_time)
   reactiontimes.append(elapsed_time)
   starttime = finaltime
   global count
   if count>9:
            C["state"] = "disabled"
            D["state"] = "disabled"
            A["state"] = "disabled"
            B["state"] = "disabled"
            #results["state"] = "disabled"
   else:
    #results["state"] = "disabled"
    bonAtext.delete(0.0, END)
    
    if random.uniform(0,1)<=prob: #determines if penalty should occur
              penalty = True 
    else:
            penalty = False
    global money
    #bonDtext = Text(window,width=75, height=25)
    #bonDtext.pack()
    bonAtext.insert(0.0, "You earned $" + str(Dplus))
    toAdd = Dplus
    money +=toAdd  #adds the money
    scorelabel.config(text = "You currently have $" + str(money))
    if penalty: #if a penalty is to be given
        #penDtext = Text(window,width=75, height=25)
        #penDtext.pack()
        bonAtext.insert(0.0, "Your penalty was $" + str(Dminus))
        toSub = Dminus
        money = money - toSub #adds the money
    scorelabel.config(text = "You currently have $" + str(money))
    global countD
    countD += 1
    count +=1
    countlabel.config(text = "Click#" + str(count))
        
    #labelD = Label(window, text="Button D")
    #labelD.pack()

def functionres():
    
    fig = plt.figure(figsize=(1,2), dpi=100)
    ax = fig.add_axes([0,0,1,1])
    buttons = ['A', 'B', 'C', 'D']
    bclick = [countA, countB, countC, countD]
    ax.bar(buttons,bclick)
    graph = FigureCanvasTkAgg(fig, bottomframe)
    
    graph.get_tk_widget().pack()
    
    
    print(reactiontimes)
    print(buttonlist)
    finaldata = [[buttonlist[i], reactiontimes[i]] for i in range(len(reactiontimes))]
    fig2 = plt.figure(figsize=(1,2), dpi=100)
    rxnbar = fig2.add_axes([0,0,1,1])
    trials = [1,2,3,4,5,6,7,8,9,10]
    
    rxnbar.bar(trials,reactiontimes)
    graph2 = FigureCanvasTkAgg(fig2, bottomframe)
    
    graph2.get_tk_widget().pack()
    print(finaldata)
    if userbest==bestdeck:
        resulttext = Text(topframe,width=25, height=10)
        textwin = """You picked the best deck"""
        resulttext.pack(side=LEFT)
        resulttext.insert(0.0, textwin)
    else:
        resulttext2 = Text(topframe,width=25, height=10)
        textloss = """You picked a losing deck"""
        resulttext2.pack(side=LEFT)
        resulttext2.insert(0.0, textloss)


if countA>countB and countA>countC and countA>countD:
    userbest=1
elif countB>countC and countB>countD:
    userbest=2
elif countC>countD:
    userbest=3
else:
    userbest=4    
startbutton = Button(topframe, text="Start", command=start)
A = Button(bottomframe, image=deck_img, command=functionA)
B = Button(bottomframe, image=deck_img, command=functionB)
C = Button(bottomframe, image=deck_img, command=functionC)
D = Button(bottomframe, image=deck_img, command=functionD)
results = Button(topframe, text="Click to view results", command=functionres)
quitB = Button(topframe, text="Quit", command=window.quit)


A.pack(side = LEFT)
B.pack(side=LEFT)
C.pack(side=LEFT)
D.pack(side=LEFT)
results.pack(side=TOP)
startbutton.pack(side=LEFT)
quitB.pack()



countlabel = Label(topframe, text="Click#" + str(count))
countlabel.pack(side=LEFT)
scorelabel = Label(topframe, text="You currently have $" + str(money))
scorelabel.pack(side=LEFT)
window.mainloop()
"""
import time
start = time.clock() # this is when your program starts
finish = time.clock() # this is after the user clicks the button

elapsed_time = finish - start # this is their 'reaction time' """

